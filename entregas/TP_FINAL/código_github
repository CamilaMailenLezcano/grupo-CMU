import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

ruta = "/content/drive/MyDrive/TP final OP/Rosario F.xlsx" #Cargamos el dataframe
df = pd.read_excel(ruta) #Pedimos a Pandas que lea el dataframe
df.head() #Vista de las primeras filas del dataframe

print(df.info()) #Nos sirve para ver información sobre las variables del dataframe

#Armamos una tabla de frecuencias con los valores absolutos y porcentuales de intención de voto.

intvoto_absolutos = df['INT DE VOTO X ESPACIO'].value_counts() #Pedimos que cuente para la columna intención de votos los valores y los meta dentro de la variable intvotos_absolutos
intvoto_porcentual = (intvoto_absolutos / intvoto_absolutos.sum()) * 100 #Pasa los valores absolutos a porcentuales y los mete dentro de la variable intvoto_porcentual
intvoto_frecuencias_juntas = pd.DataFrame({        #Juntamos ambas frecuencias
    'Espacio político': intvoto_absolutos.index,
    'Frecuencia Absoluta': intvoto_absolutos.values,
    'Frecuencia Porcentual': intvoto_porcentual.values
})
print("Intención de voto")
print("Tabla de frecuencias")
print(intvoto_frecuencias_juntas)

#tabla de frecuencias en un gráfico de barras

plt.bar(intvoto_porcentual.index, intvoto_porcentual, color='#002147')

for i, valor in enumerate(intvoto_porcentual): # Para que se vean las etiquetas de porcentaje sobre las barras
    plt.text(i, valor + 1, f'{valor:.1f}%', ha='center', fontsize=12, color='black')
    #valor + 1: Posición en el eje Y, ligeramente por encima de la barra (ajusta + 1 según sea necesario).
    #f'{valor:.1f}%': Muestra el porcentaje con un decimal seguido del símbolo %.

    # Configurar el gráfico
plt.xlabel('Espacios políticos')
plt.ylabel('Porcentaje')
plt.title('Intención de voto de espacios políticos')
plt.xticks(rotation=0) #Para que se vean horizontales
plt.gcf().set_size_inches(10, 6)  # tamaño de grafico 
plt.tight_layout()

plt.show() # Mostrar el gráfico


#Realizamos lo mismo, pero con la variable Género.

#Tabla de frecuencias

genero_absolutos = df['GENERO'].value_counts()
genero_porcentual = (genero_absolutos / genero_absolutos.sum()) * 100
genero_frecuencias_juntas = pd.DataFrame({
    'Género': genero_absolutos.index,
    'Frecuencia Absoluta': genero_absolutos.values,
    'Frecuencia Porcentual': genero_porcentual.values
})
print("Género")
print("Tabla de frecuencias")
print(genero_frecuencias_juntas)

#Plasmamos la tabla de frecuencias en un gráfico de torta

plt.figure(figsize=(6, 6))
plt.pie(genero_porcentual, labels=genero_porcentual.index, autopct='%1.1f%%', startangle=90)
plt.title('Género')
plt.axis('equal')  # Para que el gráfico sea circular
plt.show()

#Realizamos lo mismo, pero con la variable Edad.

#Tabla de frecuencias

edad_absolutos = df['EDAD'].value_counts()
edad_porcentual = (edad_absolutos / edad_absolutos.sum()) * 100
edad_frecuencias_juntas = pd.DataFrame({
    'Edad': edad_absolutos.index,
    'Frecuencia Absoluta': edad_absolutos.values,
    'Frecuencia Porcentual': edad_porcentual.values
})
print("Edad")
print("Tabla de frecuencias")
print(edad_frecuencias_juntas)

#Plasmamos la tabla de frecuencias en un gráfico de barras

plt.bar(edad_porcentual.index, edad_porcentual, color='#002147')

for i, valor in enumerate(edad_porcentual):
    plt.text(i, valor + 1, f'{valor:.1f}%', ha='center', fontsize=12, color='black')

plt.xlabel('Rangos etarios')
plt.ylabel('Porcentaje')
plt.title('Frecuencia rangos etarios')
plt.xticks(rotation=0)
plt.gcf().set_size_inches(10, 6)
plt.tight_layout()

plt.show()

# Hacemos cruces entre las variables

#Tabla Bivariada: intención de voto según género

print('Intención de voto según Género')

bivariada_voto_genero = pd.crosstab(df['INT DE VOTO X ESPACIO'], df['GENERO']) #Creamos la tabla y definimos la VD (voto) y la VI (género)
bivariada_voto_genero_porcentual = bivariada_voto_genero.div(bivariada_voto_genero.sum(axis=0), axis=1) * 100 #Pasamos a porcentajes
copia1 = bivariada_voto_genero_porcentual.copy()
print(copia1)

#Graficamos la tabla en un gráfico de barras apiladas

ax = copia1.T.plot(kind='bar', stacked=True, figsize=(10, 6), colormap='viridis') #La T antes del plot sirve para que las barras hagan el cálculo con el total de las columnas (se veía mal si lo sacábamos)

for container in ax.containers: # Para añadir etiquetas de porcentaje
    ax.bar_label(container, fmt='%.1f%%', label_type='center', fontsize=10, color='white') # La función le pide a cada barra que muestre las etiquetas y define sus características
    #fmt='%.1f%%': Formato de las etiquetas (porcentajes con un decimal).

    # Configurar etiquetas y título
plt.xlabel('Género')
plt.ylabel('Espacios políticos')
plt.title('Intención de voto según género')
plt.legend(title='Espacios políticos', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=0)
plt.tight_layout()

plt.show()

#El siguiente gráfico muestra la misma relación de variables, de manera inversa
copia_inversa1 = pd.crosstab(df['GENERO'], df ['INT DE VOTO X ESPACIO'])
copia_inversa_porcentaje1 = copia_inversa1.div(copia_inversa1.sum(axis=0), axis=1) * 100
copia_de_copia_inversa1 = copia_inversa_porcentaje1.copy()

ax = copia_de_copia_inversa1.T.plot(kind='bar', stacked=True, figsize=(10, 6), colormap='viridis')

for container in ax.containers: # Para añadir etiquetas de porcentaje
    ax.bar_label(container, fmt='%.1f%%', label_type='center', fontsize=10, color='white') #fmt='%.1f%%': Formato de las etiquetas (porcentajes con un decimal).

    # Configurar etiquetas y título
plt.xlabel('Espacios políticos')
plt.ylabel('Género')
plt.title('Intención de voto según género')
plt.legend(title='Espacios políticos', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=0)
plt.tight_layout()

# Mostrar el gráfico
plt.show()


#Repetimos lo anterior, pero cruzando intención de voto con rango etario

#Tabla Bivariada: intención de voto según Edad

print('Intención de voto según Edad')

bivariada_voto_edad = pd.crosstab(df['INT DE VOTO X ESPACIO'], df['EDAD']) #Creamos la tabla y definimos la VD (voto) y la VI (edad)
bivariada_voto_edad_porcentual = bivariada_voto_edad.div(bivariada_voto_edad.sum(axis=0), axis=1) * 100
copia2 = bivariada_voto_edad_porcentual.copy()
print(copia2)

#Graficamos la tabla en un gráfico de barras apiladas

ax = copia2.T.plot(kind='bar', stacked=True, figsize=(10, 6), colormap='viridis')

for container in ax.containers: # Para añadir etiquetas de porcentaje
    ax.bar_label(container, fmt='%.1f%%', label_type='center', fontsize=10, color='white')

    # Configurar etiquetas y título
plt.xlabel('Rango etario')
plt.ylabel('Espacios políticos')
plt.title('Intención de voto según rango etario')
plt.legend(title='Espacios políticos', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=0)
plt.tight_layout()

plt.show()

#El siguiente gráfico muestra la misma relación de variables, de manera inversa
copia_inversa2 = pd.crosstab(df['EDAD'], df ['INT DE VOTO X ESPACIO'])
copia_inversa_porcentaje2 = copia_inversa2.div(copia_inversa2.sum(axis=0), axis=1) * 100
copia_de_copia_inversa2 = copia_inversa_porcentaje2.copy()

ax = copia_de_copia_inversa2.T.plot(kind='bar', stacked=True, figsize=(10, 6), colormap='viridis')

for container in ax.containers: # Para añadir etiquetas de porcentaje
    ax.bar_label(container, fmt='%.1f%%', label_type='center', fontsize=10, color='black')

    # Configurar etiquetas y título
plt.xlabel('Espacios políticos')
plt.ylabel('Rango etario')
plt.title('Intención de voto según rango etario')
plt.legend(title='Espacios políticos', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=0)
plt.tight_layout()

# Mostrar el gráfico
plt.show()

#Para poder realizar la regresión, es preciso codificar las categorías de las variables, ya que al estar en string no se puede realizar el cálculo.

#Cada categoría se convierte en una columna binaria.

df_dummies = pd.get_dummies(df, columns=['EDAD','GENERO', 'INT DE VOTO X ESPACIO'], drop_first=False) # Se incluyen todas las categorías

#Eliminamos columnas innecesarias

eliminamos_columnas = ['RADIO', 'Coord1__Latitude', 'Coord1__Longitude', 'METODO', 'interview__key']
df_dummies_limpio = df_dummies.drop(columns=eliminamos_columnas, axis=1)

df_dummies_limpio = df_dummies_limpio.astype(int) #astype convierte al dataframe en enteros.

print(df_dummies_limpio)
print(df_dummies_limpio.dtypes)


#Control de columnas

print("Columnas dataframe original")
print(df.columns)
print("----------------------------------------------------------------------")
print("Columnas dataframe dummies sin limpiar")
print(df_dummies.columns)
print("----------------------------------------------------------------------")
print("Columnas dataframe dummies limpio")
print(df_dummies_limpio.columns)

#Correlacionamos todas las categorías de la matriz entre sí

matriz_correlacion = df_dummies_limpio.corr()

print(matriz_correlacion)


import statsmodels.api as sm
import numpy as np

#Destacamos las siguientes correlaciones

#Correlacionamos las variables más interesantes que vimos

corr_lla_fem = df_dummies_limpio['INT DE VOTO X ESPACIO_LIBERTARIOS'].corr(df_dummies_limpio['GENERO_Femenino'])
corr_lla_masc = df_dummies_limpio['INT DE VOTO X ESPACIO_LIBERTARIOS'].corr(df_dummies_limpio['GENERO_Masculino'])
corr_jxc_56ymas = df_dummies_limpio['INT DE VOTO X ESPACIO_JxC'].corr(df_dummies_limpio['EDAD_56 y mas'])
corr_otros_46a55 = df_dummies_limpio['INT DE VOTO X ESPACIO_OTROS'].corr(df_dummies_limpio['EDAD_46 a 55'])

print("Correlaciones notorias (R de Pearson)")
print(f" - Género FEMENINO y Voto LIBERTARIO: {corr_lla_fem}") #La f permite incluir dentro de los {} a la variable
print(f" - Género MASCULINO  y Voto LIBERTARIO: {corr_lla_masc}")
print(f" - Edad 46 a 55 y Voto OTROS: {corr_otros_46a55}")
print(f" - Edad 56 y más y Voto JXC: {corr_jxc_56ymas}")

print("Regresión Género Femenino y Libertarios")

X = df_dummies_limpio[['GENERO_Femenino']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_LIBERTARIOS']
X = sm.add_constant(X)

modelo = sm.Logit(y, X)

resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("Odds Ratios:", odds_ratios)

rango_edad = np.linspace(X.min(), X.max(), 100)
voto_espacio = resultado.predict(rango_edad)

plt.plot(rango_edad, voto_espacio)
plt.xlabel('Edad')
plt.ylabel('Intención de voto LIBERTARIOS')
plt.title('Regresión Logística: Intención de voto LIBERTARIOS según género FEMENINO')
plt.grid(True)
plt.show()

print("Regresión Género Másculino y Libertarios")

X = df_dummies_limpio[['GENERO_Masculino']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_LIBERTARIOS']
X = sm.add_constant(X)

modelo = sm.Logit(y, X)

resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("Odds Ratios:", odds_ratios)

rango_edad = np.linspace(X.min(), X.max(), 100)
voto_espacio = resultado.predict(rango_edad)

plt.plot(rango_edad, voto_espacio)
plt.xlabel('GENERO_Masculino')
plt.ylabel('Intención de voto LIBERTARIOS')
plt.title('Regresión Logística: Intención de voto LIBERTARIOS vs MASCULINO')
plt.grid(True)
plt.show()

print("Regresión EDAD 56 y mas y JxC")

X = df_dummies_limpio[['EDAD_56 y mas']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_JxC']
X = sm.add_constant(X)

modelo = sm.Logit(y, X)

resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("Odds Ratios:", odds_ratios)

rango_edad = np.linspace(X.min(), X.max(), 100)
voto_espacio = resultado.predict(rango_edad)

plt.plot(rango_edad, voto_espacio)
plt.xlabel('EDAD 56 y mas')
plt.ylabel('Intención de voto JxC')
plt.title('Regresión Logística: Intención de voto JxC vs EDAD 56 y mas')
plt.grid(True)
plt.show()

print("Regresión EDAD 46 a 55 y Otros ")

X = df_dummies_limpio[['EDAD_46 a 55']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_OTROS']
X = sm.add_constant(X)

modelo = sm.Logit(y, X)

resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("Odds Ratios:", odds_ratios)

rango_edad = np.linspace(X.min(), X.max(), 100)
voto_espacio = resultado.predict(rango_edad)

plt.plot(rango_edad, voto_espacio)
plt.xlabel('EDAD 46 a 55')
plt.ylabel('Intención de voto OTROS')
plt.title('Regresión Logística: Intención de voto OTROS vs EDAD 46 a 55')
plt.grid(True)
plt.show()

print('Intención de voto LIBERTARIOS según EDAD')

X = df_dummies_limpio[['EDAD_16 a 25', 'EDAD_26 a 35', 'EDAD_36 a 45', 'EDAD_46 a 55', 'EDAD_56 y mas']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_LIBERTARIOS']
X = sm.add_constant(X)

modelo = sm.Logit(y, X)

resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("Odds Ratios:", odds_ratios)

rango_edad = np.linspace(X.min(), X.max(), 100)
voto_espacio = resultado.predict(rango_edad)

plt.plot(rango_edad, voto_espacio)
plt.xlabel('Edad')
plt.ylabel('Intención de voto LIBERTARIOS')
plt.title('Regresión Logística: Intención de voto LIBERTARIOS vs. Edad')
plt.grid(True)
plt.show()

print('Intención de voto FIT según EDAD')

X = df_dummies_limpio[['EDAD_16 a 25', 'EDAD_26 a 35', 'EDAD_36 a 45', 'EDAD_46 a 55', 'EDAD_56 y mas']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_FIT']
X = sm.add_constant(X)

modelo = sm.Logit(y, X)

resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("Odds Ratios:", odds_ratios)

rango_edad = np.linspace(X.min(), X.max(), 100)
voto_espacio = resultado.predict(rango_edad)

plt.plot(rango_edad, voto_espacio)
plt.xlabel('Edad')
plt.ylabel('Intención de voto FIT')
plt.title('Regresión Logística: Intención de voto FIT vs. Edad')
plt.grid(True)
plt.show()

print('Intención de voto JxC según EDAD')

X = df_dummies_limpio[['EDAD_16 a 25', 'EDAD_26 a 35', 'EDAD_36 a 45', 'EDAD_46 a 55', 'EDAD_56 y mas']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_JxC']
X = sm.add_constant(X)

modelo = sm.Logit(y, X)

resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("Odds Ratios:", odds_ratios)

rango_edad = np.linspace(X.min(), X.max(), 100)
voto_espacio = resultado.predict(rango_edad)

plt.plot(rango_edad, voto_espacio)
plt.xlabel('Edad')
plt.ylabel('Intención de voto JxC')
plt.title('Regresión Logística: Intención de voto JxC vs. Edad')
plt.grid(True)
plt.show()

print('Intención de voto PNK según EDAD')

X = df_dummies_limpio[['EDAD_16 a 25', 'EDAD_26 a 35', 'EDAD_36 a 45', 'EDAD_46 a 55', 'EDAD_56 y mas']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_PNK']
X = sm.add_constant(X)

modelo = sm.Logit(y, X)

resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("Odds Ratios:", odds_ratios)

rango_edad = np.linspace(X.min(), X.max(), 100)
voto_espacio = resultado.predict(rango_edad)

plt.plot(rango_edad, voto_espacio)
plt.xlabel('Edad')
plt.ylabel('Intención de voto PNK')
plt.title('Regresión Logística: Intención de voto PNK vs. Edad')
plt.grid(True)
plt.show()

print('Intención de voto OTROS según EDAD')

X = df_dummies_limpio[['EDAD_16 a 25', 'EDAD_26 a 35', 'EDAD_36 a 45', 'EDAD_46 a 55', 'EDAD_56 y mas']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_OTROS']
X = sm.add_constant(X)

modelo = sm.Logit(y, X)

resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("Odds Ratios:", odds_ratios)

rango_edad = np.linspace(X.min(), X.max(), 100)
voto_espacio = resultado.predict(rango_edad)

plt.plot(rango_edad, voto_espacio)
plt.xlabel('Edad')
plt.ylabel('Intención de voto OTROS')
plt.title('Regresión Logística: Intención de voto OTROS vs. Edad')
plt.grid(True)
plt.show()

print('Intención de voto NINGUNO/NOSABE según EDAD')

X = df_dummies_limpio[['EDAD_16 a 25', 'EDAD_26 a 35', 'EDAD_36 a 45', 'EDAD_46 a 55', 'EDAD_56 y mas']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_NINGUNO/NOSABE']
X = sm.add_constant(X)

modelo = sm.Logit(y, X)

resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("Odds Ratios:", odds_ratios)

rango_edad = np.linspace(X.min(), X.max(), 100)
voto_espacio = resultado.predict(rango_edad)

plt.plot(rango_edad, voto_espacio)
plt.xlabel('Edad')
plt.ylabel('Intención de voto NINGUNO/NOSABE')
plt.title('Regresión Logística: Intención de voto NINGUNO/NOSABE vs. Edad')
plt.grid(True)
plt.show()

X = df_dummies_limpio[['GENERO_Femenino', 'GENERO_Masculino', 'GENERO_Otro']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_LIBERTARIOS']

X = sm.add_constant(X)

modelo = sm.Logit(y, X)
resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("\nOdds Ratios:")
print(odds_ratios)

X = df_dummies_limpio[['GENERO_Femenino', 'GENERO_Masculino', 'GENERO_Otro']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_FdT']

X = sm.add_constant(X)

modelo = sm.Logit(y, X)
resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("\nOdds Ratios:")
print(odds_ratios)


print("Regresión Géneros y LIBERTARIOS")

X = df_dummies_limpio[['GENERO_Femenino', 'GENERO_Masculino', 'GENERO_Otro']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_LIBERTARIOS']
X = sm.add_constant(X)

modelo = sm.Logit(y, X)

resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("Odds Ratios:", odds_ratios)

rango_edad = np.linspace(X.min(), X.max(), 100)
voto_espacio = resultado.predict(rango_edad)

plt.plot(rango_edad, voto_espacio)
plt.xlabel('Género')
plt.ylabel('Intención de voto LIBERTARIOS')
plt.title('Regresión Logística: Intención de voto LIBERTARIOS vs. GÉNERO')
plt.grid(True)
plt.show()

print("Regresión Género Femenino y Libertarios")

X = df_dummies_limpio[['GENERO_Femenino']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_LIBERTARIOS']
X = sm.add_constant(X)

modelo = sm.Logit(y, X)

resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("Odds Ratios:", odds_ratios)

rango_edad = np.linspace(X.min(), X.max(), 100)
voto_espacio = resultado.predict(rango_edad)

plt.plot(rango_edad, voto_espacio)
plt.xlabel('Género Femenino')
plt.ylabel('Intención de voto LIBERTARIOS')
plt.title('Regresión Logística: Intención de voto LIBERTARIOS según género FEMENINO')
plt.grid(True)
plt.show()

print("Regresión Género Másculino y Libertarios")

X = df_dummies_limpio[['GENERO_Masculino']]
y = df_dummies_limpio['INT DE VOTO X ESPACIO_LIBERTARIOS']
X = sm.add_constant(X)

modelo = sm.Logit(y, X)

resultado = modelo.fit()

print(resultado.summary())

odds_ratios = np.exp(resultado.params)
print("Odds Ratios:", odds_ratios)

rango_edad = np.linspace(X.min(), X.max(), 100)
voto_espacio = resultado.predict(rango_edad)

plt.plot(rango_edad, voto_espacio)
plt.xlabel('GENERO Masculino')
plt.ylabel('Intención de voto LIBERTARIOS')
plt.title('Regresión Logística: Intención de voto LIBERTARIOS vs MASCULINO')
plt.grid(True)
plt.show()

variableX = df_dummies_limpio["GENERO_Masculino"]
variableY = df_dummies_limpio["INT DE VOTO X ESPACIO_LIBERTARIOS"]

# Graficar los puntos de dispersión
sns.scatterplot(data=df_dummies_limpio, x=variableX, y=variableY, s=60, color="green")

# Añadir la recta de regresión
sns.regplot(x=variableX, y=variableY, scatter=False, color='red', line_kws={'label': 'Regresión lineal'})

# Mostrar el gráfico
plt.title('Gráfico de dispersión con recta de regresión')
plt.xlabel('GENERO_Masculino')
plt.ylabel('INT DE VOTO X ESPACIO_LIBERTARIOS')
plt.legend()
plt.show()


x_simple= sm.add_constant(df_dummies_limpio['GENERO_Femenino'])
y_simple= df_dummies_limpio['INT DE VOTO X ESPACIO_LIBERTARIOS']
modelosimple= sm.OLS(y_simple,x_simple).fit()
print(modelosimple.summary())

#Generamos el gráfico de regresión
plt.scatter(df_dummies_limpio['GENERO_Femenino'], df_dummies_limpio['INT DE VOTO X ESPACIO_LIBERTARIOS'], label= "Datos reales", color= "green")
intercepto, pendiente= modelosimple.params
valoresx= np.linspace(df_dummies_limpio['GENERO_Femenino'].min(), df_dummies_limpio['GENERO_Femenino'].max(), 100)
valoresy= intercepto+pendiente*valoresx #Beta0 + Beta1 * X (Es la ecuación de la regresión lineal)
plt.plot(valoresx,valoresy, color="orange", label = f'Recta de regresión (pendiente={pendiente:.2f}') #Personalizamos el gráfico
plt.xlabel= ("Opinión sobre  la necesidad de liberalizar el mercado")
plt.ylabel= ("Priorización del desarrollo económico\n por sobre el medioambiente")
plt.title ("Gráfico de dispersión con recta de regresión")
plt.legend()
plt.show()


import folium
from IPython.display import display, HTML

rosario_coordenadas = [-32.94682, -60.63932]

# Crear el mapa centrado en Rosario
mapa_rosario = folium.Map(location=rosario_coordenadas, zoom_start=13)

# Añadir un marcador de ejemplo
folium.Marker(
    location=rosario_coordenadas,
    popup="Centro de Rosario",
    icon=folium.Icon(color="blue", icon="info-sign"),
).add_to(mapa_rosario)

# Guardar el mapa como archivo HTML
mapa_rosario.save("mapa_rosario.html")

print("Mapa guardado como 'mapa_rosario.html'")

import os

ruta_actual = os.getcwd()  # Obtener el directorio de trabajo actual
print(f"El mapa se guardó en: {ruta_actual}/mapa_rosario.html")

from IPython.display import display

display(mapa_rosario)

from IPython.display import IFrame
import folium
from IPython.display import display, HTML

gdf = gpd.read_file("/content/drive/MyDrive/TP final OP/Rosario F.xlsx")

print("Mapa Rosario con unidades del Data Frame de Rosario")
for _, row in gdf.iterrows():
    folium.Marker(
        location=[row['Coord1__Latitude'], row['Coord1__Longitude']],
        popup=(
            f"EDAD: {row['EDAD']}<br>"
            f"GENERO: {row['GENERO']}<br>"
            f"INT DE VOTO: {row['INT DE VOTO X ESPACIO']}<br>"
            f"RADIO: {row['RADIO']}"
        )
    ).add_to(mapa_rosario)


# Mostrar el mapa en el entorno Jupyter Notebook
map_html = mapa_rosario._repr_html_()

display(HTML(map_html))


colores_categorias = {
    "FdT": "blue",
    "JxC": "yellow",
    "LIBERTARIOS": "purple",
    "FIT": "red",
    "PNK": "green",
    "NINGUNO/NOSABE": "pink",
    "OTROS": "gray"
    }

# Crear el mapa centrado en Rosario
mapa_rosario = folium.Map(location=rosario_coordenadas, zoom_start=13, control_scale=True)

# Añadir puntos al mapa, con colores según la categoría
for _, row in df.iterrows():
    color = colores_categorias.get(row["INT DE VOTO X ESPACIO"], "gray")  # Color por categoría
    folium.CircleMarker(
        location=[row["Coord1__Latitude"], row["Coord1__Longitude"]],
        radius=8,  # Tamaño del círculo
        color=color,
        fill=True,
        fill_color=color,
        fill_opacity=0.8,  # Opacidad del relleno
    ).add_to(mapa_rosario)

# Guardar el mapa como archivo HTML
mapa_rosario.save("mapa_rosario.html")
print("Mapa guardado como 'mapa_rosario.html'")

# Mostrar el mapa en Jupyter Notebook
display(mapa_rosario)
