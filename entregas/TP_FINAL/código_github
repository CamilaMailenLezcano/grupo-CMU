import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

ruta = "/content/drive/MyDrive/TP final OP/Rosario F.xlsx" #Cargamos el dataframe
df = pd.read_excel(ruta) #Pedimos a Pandas que lea el dataframe
df.head() #Vista de las primeras filas del dataframe

print(df.info()) #Nos sirve para ver información sobre las variables del dataframe

#Armamos una tabla de frecuencias con los valores absolutos y porcentuales de intención de voto.

intvoto_absolutos = df['INT DE VOTO X ESPACIO'].value_counts() #Pedimos que cuente para la columna intención de votos los valores y los meta dentro de la variable intvotos_absolutos
intvoto_porcentual = (intvoto_absolutos / intvoto_absolutos.sum()) * 100 #Pasa los valores absolutos a porcentuales y los mete dentro de la variable intvoto_porcentual
intvoto_frecuencias_juntas = pd.DataFrame({        #Juntamos ambas frecuencias
    'Espacio político': intvoto_absolutos.index,
    'Frecuencia Absoluta': intvoto_absolutos.values,
    'Frecuencia Porcentual': intvoto_porcentual.values
})
print("Intención de voto")
print("Tabla de frecuencias")
print(intvoto_frecuencias_juntas)

#tabla de frecuencias en un gráfico de barras

plt.bar(intvoto_porcentual.index, intvoto_porcentual, color='#002147')

for i, valor in enumerate(intvoto_porcentual): # Para que se vean las etiquetas de porcentaje sobre las barras
    plt.text(i, valor + 1, f'{valor:.1f}%', ha='center', fontsize=12, color='black')
    #valor + 1: Posición en el eje Y, ligeramente por encima de la barra (ajusta + 1 según sea necesario).
    #f'{valor:.1f}%': Muestra el porcentaje con un decimal seguido del símbolo %.

    # Configurar el gráfico
plt.xlabel('Espacios políticos')
plt.ylabel('Porcentaje')
plt.title('Intención de voto de espacios políticos')
plt.xticks(rotation=0) #Para que se vean horizontales
plt.gcf().set_size_inches(10, 6)  # tamaño de grafico 
plt.tight_layout()

plt.show() # Mostrar el gráfico


#Realizamos lo mismo, pero con la variable Género.

#Tabla de frecuencias

genero_absolutos = df['GENERO'].value_counts()
genero_porcentual = (genero_absolutos / genero_absolutos.sum()) * 100
genero_frecuencias_juntas = pd.DataFrame({
    'Género': genero_absolutos.index,
    'Frecuencia Absoluta': genero_absolutos.values,
    'Frecuencia Porcentual': genero_porcentual.values
})
print("Género")
print("Tabla de frecuencias")
print(genero_frecuencias_juntas)

#Plasmamos la tabla de frecuencias en un gráfico de torta

plt.figure(figsize=(6, 6))
plt.pie(genero_porcentual, labels=genero_porcentual.index, autopct='%1.1f%%', startangle=90)
plt.title('Género')
plt.axis('equal')  # Para que el gráfico sea circular
plt.show()

#Realizamos lo mismo, pero con la variable Edad.

#Tabla de frecuencias

edad_absolutos = df['EDAD'].value_counts()
edad_porcentual = (edad_absolutos / edad_absolutos.sum()) * 100
edad_frecuencias_juntas = pd.DataFrame({
    'Edad': edad_absolutos.index,
    'Frecuencia Absoluta': edad_absolutos.values,
    'Frecuencia Porcentual': edad_porcentual.values
})
print("Edad")
print("Tabla de frecuencias")
print(edad_frecuencias_juntas)

#Plasmamos la tabla de frecuencias en un gráfico de barras

plt.bar(edad_porcentual.index, edad_porcentual, color='#002147')

for i, valor in enumerate(edad_porcentual):
    plt.text(i, valor + 1, f'{valor:.1f}%', ha='center', fontsize=12, color='black')

plt.xlabel('Rangos etarios')
plt.ylabel('Porcentaje')
plt.title('Frecuencia rangos etarios')
plt.xticks(rotation=0)
plt.gcf().set_size_inches(10, 6)
plt.tight_layout()

plt.show()

# Hacemos cruces entre las variables

#Tabla Bivariada: intención de voto según género

print('Intención de voto según Género')

bivariada_voto_genero = pd.crosstab(df['INT DE VOTO X ESPACIO'], df['GENERO']) #Creamos la tabla y definimos la VD (voto) y la VI (género)
bivariada_voto_genero_porcentual = bivariada_voto_genero.div(bivariada_voto_genero.sum(axis=0), axis=1) * 100 #Pasamos a porcentajes
copia1 = bivariada_voto_genero_porcentual.copy()
print(copia1)

#Graficamos la tabla en un gráfico de barras apiladas

ax = copia1.T.plot(kind='bar', stacked=True, figsize=(10, 6), colormap='viridis') #La T antes del plot sirve para que las barras hagan el cálculo con el total de las columnas (se veía mal si lo sacábamos)

for container in ax.containers: # Para añadir etiquetas de porcentaje
    ax.bar_label(container, fmt='%.1f%%', label_type='center', fontsize=10, color='white') # La función le pide a cada barra que muestre las etiquetas y define sus características
    #fmt='%.1f%%': Formato de las etiquetas (porcentajes con un decimal).

    # Configurar etiquetas y título
plt.xlabel('Género')
plt.ylabel('Espacios políticos')
plt.title('Intención de voto según género')
plt.legend(title='Espacios políticos', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=0)
plt.tight_layout()

plt.show()

#El siguiente gráfico muestra la misma relación de variables, de manera inversa
copia_inversa1 = pd.crosstab(df['GENERO'], df ['INT DE VOTO X ESPACIO'])
copia_inversa_porcentaje1 = copia_inversa1.div(copia_inversa1.sum(axis=0), axis=1) * 100
copia_de_copia_inversa1 = copia_inversa_porcentaje1.copy()

ax = copia_de_copia_inversa1.T.plot(kind='bar', stacked=True, figsize=(10, 6), colormap='viridis')

for container in ax.containers: # Para añadir etiquetas de porcentaje
    ax.bar_label(container, fmt='%.1f%%', label_type='center', fontsize=10, color='white') #fmt='%.1f%%': Formato de las etiquetas (porcentajes con un decimal).

    # Configurar etiquetas y título
plt.xlabel('Espacios políticos')
plt.ylabel('Género')
plt.title('Intención de voto según género')
plt.legend(title='Espacios políticos', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=0)
plt.tight_layout()

# Mostrar el gráfico
plt.show()


#Repetimos lo anterior, pero cruzando intención de voto con rango etario

#Tabla Bivariada: intención de voto según Edad

print('Intención de voto según Edad')

bivariada_voto_edad = pd.crosstab(df['INT DE VOTO X ESPACIO'], df['EDAD']) #Creamos la tabla y definimos la VD (voto) y la VI (edad)
bivariada_voto_edad_porcentual = bivariada_voto_edad.div(bivariada_voto_edad.sum(axis=0), axis=1) * 100
copia2 = bivariada_voto_edad_porcentual.copy()
print(copia2)

#Graficamos la tabla en un gráfico de barras apiladas

ax = copia2.T.plot(kind='bar', stacked=True, figsize=(10, 6), colormap='viridis')

for container in ax.containers: # Para añadir etiquetas de porcentaje
    ax.bar_label(container, fmt='%.1f%%', label_type='center', fontsize=10, color='white')

    # Configurar etiquetas y título
plt.xlabel('Rango etario')
plt.ylabel('Espacios políticos')
plt.title('Intención de voto según rango etario')
plt.legend(title='Espacios políticos', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=0)
plt.tight_layout()

plt.show()

#El siguiente gráfico muestra la misma relación de variables, de manera inversa
copia_inversa2 = pd.crosstab(df['EDAD'], df ['INT DE VOTO X ESPACIO'])
copia_inversa_porcentaje2 = copia_inversa2.div(copia_inversa2.sum(axis=0), axis=1) * 100
copia_de_copia_inversa2 = copia_inversa_porcentaje2.copy()

ax = copia_de_copia_inversa2.T.plot(kind='bar', stacked=True, figsize=(10, 6), colormap='viridis')

for container in ax.containers: # Para añadir etiquetas de porcentaje
    ax.bar_label(container, fmt='%.1f%%', label_type='center', fontsize=10, color='black')

    # Configurar etiquetas y título
plt.xlabel('Espacios políticos')
plt.ylabel('Rango etario')
plt.title('Intención de voto según rango etario')
plt.legend(title='Espacios políticos', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=0)
plt.tight_layout()

# Mostrar el gráfico
plt.show()
